" ~/.vim/vimrc

" use vim settings, rather than vi settings.
" should be first, because it changes other options as a side effect.
set nocompatible

" autoinstall and update vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall
endif

call plug#begin()
" colorschemes
Plug 'flazz/vim-colorschemes'
Plug 'tpope/vim-vividchalk'

" github bundles:
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tmhedberg/matchit'
Plug 'yegappan/mru'
Plug 'kien/ctrlp.vim'
Plug 'mileszs/ack.vim'
Plug 'jlanzarotta/bufexplorer'

" programming related
" syntax checking
Plug 'scrooloose/syntastic'

" python
Plug 'hynek/vim-python-pep8-indent'

" erlang
Plug 'jimenezrick/vimerl'

" elixir
Plug 'elixir-lang/vim-elixir'

" racket
Plug 'wlangstroth/vim-racket'


" Markdown syntax highlighting
"Plug 'godlygeek/tabular'
"Plug 'plasticboy/vim-markdown'
"Plug 'lunaru/vim-twig'

" Github repos of the user 'vim-scripts'
" " => can omit the username part
" Plug 'FuzzyFinder'

" non github bundles:
"Plug 'git://github.com/msanders/snipmate.vim.git'
call plug#end()


" default encoding
set encoding=utf-8

" backups and set backup dirs
set nobackup
set nowritebackup
" set backupdir=~/.vim/backup   " make sure the dir exists!
set directory=~/.vim-tmp,~/.vim/tmp,/tmp  " make sure one of the dirs exist!


" set 256 colors in vim
" set t_Co=256
" colorscheme ir_black
colorscheme grb256
" let g:solarized_termcolors=256
" colorscheme solarized
" set background=dark

" enable syntax highlighting
" syntax on
"highlight the 80th column in a darkish grey
" set colorcolumn=80
" highlight ColorColumn "ctermbg=232


set history=200 " keep 200 lines of command line history
set ruler       " show the cursor position all the time
set showcmd     " display incomplete commands
set wildmenu    " enhanced command line options.
set wildmode=full
set number        " Zeilennummern
set numberwidth=3	" 3 zeichen für die Nummerierung
"set cmdheight=2   " info-bar Höhe
set hidden      " Erlaubt z.B. das oeffnen neuer Dateien, wenn ungespeicherte
                " Aenderungen vorhanden sind
set cursorline  " highlight current line the cursor is on
set scrolloff=2 " keep n lines from top/bottom of the window while scrolling

" searching
set hlsearch		" highlight search results
set incsearch		" do incremental searching
set ignorecase
set smartcase
"turn off search highlighting with \q
:nmap \q :nohlsearch<CR>

" indentation
set cindent       "
set autoindent		" Einrückung wie Zeile zuvor
set smartindent		"
set tabstop=2     " Tab Schrittweite 4 Zeichen
set shiftwidth=2	" indent width for autoindent
set expandtab     " spaces for tabs
set nowrap

" Always display the status line, even if only one window is displayed
set laststatus=2


" syntastic settings
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" remove trailing whitespace on save
autocmd BufWritePre * :%s/\s\+$//e

" Instead of failing a command because of unsaved changes, instead raise a
" dialogue asking if you wish to save changed files.
set confirm

" use the mouse (for scrolling only, I hope)
set mouse=a
map <ScrollWheelUp> <C-Y>
map <ScrollWheelDown> <C-E>


" Mappings
" Map Y to act like D and C, i.e. to yank until EOL, rather than act as yy,
" which is the default
map Y y$

" Easy split window navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" better history navigation
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>

" ctrlP
noremap <Leader>, :CtrlP<CR>
noremap <Leader>a :Ack

" change cursor in input mode (for tmux in iterm2)
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif
" upon hitting escape to change modes,
" send successive move-left and move-right
" commands to immediately redraw the cursor
inoremap <special> <Esc> <Esc>hl
